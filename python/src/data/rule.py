'''This module describes defines a r2ml rule in an object oriented way '''

from .SubjectMap import AbstractSubjectMap
from .SubjectMap import ColumnSubjectMap
from .SubjectMap import TemplateSubjectMap


class Rule:
    """
        It must have exactly one rr:logicalTable property. Its value is a logical table that specifies a SQL query result to be mapped to triples.
        It must have exactly one subject map that specifies how to generate a subject for each row of the logical table. It may be specified in two ways:
            using the rr:subjectMap property, whose value must be the subject map, or
            using the constant shortcut property rr:subject.
        It may have zero or more rr:predicateObjectMap properties, whose values must be predicate-object maps. They specify pairs of predicate maps and object maps that, together with the subjects generated by the subject map, may form one or more RDF triples for each row.
    """
    def __init__(self, rule_id):
        self.subject_map = None
        self.predicate_object_maps = []
        self.rule_id = rule_id
        self.sql_statement = None

    def create_subject_map(self, subject_map):
        if not isinstance(subject_map, AbstractSubjectMap):
            pass
        self.subject_map = subject_map

    def create_subject_map(self, rr_type, subject_placeholder, class_value):
        if rr_type == "rr:template":
            self.subject_map = TemplateSubjectMap(subject_placeholder, class_value)
        elif rr_type == "rr:column":
            self.subject_map = ColumnSubjectMap(subject_placeholder, class_value)

    def add_logical_table(self, type, value):
        if type == "rr:tableName":
            self.sql_statement = "Select * from " + value
        elif type == "rr:sqlQuery":
            self.sql_statement = value
        else:
            print("This is an unsupported type")

    def get_subject_map(self):
        if not isinstance(self.subject_map, AbstractSubjectMap):
            print("Please set the subject map first")
            pass
        return self.subject_map.get_triple()

    def create_subject_map_with_template(self, subject, predicate, class_value):
        pass

    def add_predicate_object_map(self):
        pass
